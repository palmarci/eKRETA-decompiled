package hu.ekreta.ellenorzo.parceler;

import android.os.Parcel;
import d.b.a.a;
import java.util.Calendar;
import kotlin.Metadata;
import kotlin.NotImplementedError;
import kotlin.jvm.internal.Intrinsics;

@Metadata(bv = {1, 0, 3}, d1 = {"\u0000\"\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0002\n\u0000\n\u0002\u0010\b\n\u0000\bÆ\u0002\u0018\u00002\n\u0012\u0006\u0012\u0004\u0018\u00010\u00020\u0001B\u0007\b\u0002¢\u0006\u0002\u0010\u0003J\u0012\u0010\u0004\u001a\u0004\u0018\u00010\u00022\u0006\u0010\u0005\u001a\u00020\u0006H\u0016J\u001e\u0010\u0007\u001a\u00020\b*\u0004\u0018\u00010\u00022\u0006\u0010\u0005\u001a\u00020\u00062\u0006\u0010\t\u001a\u00020\nH\u0016¨\u0006\u000b"}, d2 = {"Lhu/ekreta/ellenorzo/parceler/CalendarParceler;", "Lkotlinx/android/parcel/Parceler;", "Ljava/util/Calendar;", "()V", "create", "parcel", "Landroid/os/Parcel;", "write", "", "flags", "", "app_guardianProdRelease"}, k = 1, mv = {1, 1, 15})
/* compiled from: Parcelers.kt */
public final class CalendarParceler implements a<Calendar> {
    public static final CalendarParceler INSTANCE = new CalendarParceler();

    public void a(Calendar calendar, Parcel parcel) {
        Intrinsics.checkParameterIsNotNull(parcel, "parcel");
        if (calendar != null) {
            parcel.writeInt(1);
            parcel.writeLong(calendar.getTimeInMillis());
            return;
        }
        parcel.writeInt(0);
    }

    public /* bridge */ /* synthetic */ void write(Object obj, Parcel parcel, int i2) {
        a((Calendar) obj, parcel);
    }

    public Calendar create(Parcel parcel) {
        Intrinsics.checkParameterIsNotNull(parcel, "parcel");
        if (parcel.readInt() == 0) {
            return null;
        }
        Calendar instance = Calendar.getInstance();
        instance.setTimeInMillis(parcel.readLong());
        return instance;
    }

    public Calendar[] newArray(int i2) {
        throw new NotImplementedError("Generated by Android Extensions automatically");
    }
}
